package day21;

import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Input {
  public static String INPUT =
      "../.. => ..#/#.#/###\n"
    + "#./.. => .#./#../###\n"
    + "##/.. => #.#/#.#/..#\n"
    + ".#/#. => .##/..#/#..\n"
    + "##/#. => #../#.#/#..\n"
    + "##/## => #.#/.#./#..\n"
    + ".../.../... => ####/##../#.../#...\n"
    + "#../.../... => ##.#/####/.#../....\n"
    + ".#./.../... => ...#/...#/#.../.##.\n"
    + "##./.../... => ###./#.##/#..#/...#\n"
    + "#.#/.../... => ##.#/###./.#.#/##..\n"
    + "###/.../... => .###/#..#/..##/.##.\n"
    + ".#./#../... => ####/#..#/#..#/#..#\n"
    + "##./#../... => #.##/###./##../#...\n"
    + "..#/#../... => ..##/.#.#/..#./.###\n"
    + "#.#/#../... => .##./.#../..#./###.\n"
    + ".##/#../... => ####/..../###./###.\n"
    + "###/#../... => .#.#/.###/##.#/#..#\n"
    + ".../.#./... => ..../.#../.##./..#.\n"
    + "#../.#./... => #.##/..#./####/#.##\n"
    + ".#./.#./... => .#.#/.###/#.#./.#.#\n"
    + "##./.#./... => #..#/#.#./...#/.###\n"
    + "#.#/.#./... => .##./#..#/####/.###\n"
    + "###/.#./... => #.../..../.#.#/##..\n"
    + ".#./##./... => #..#/..##/.##./.#.#\n"
    + "##./##./... => ..##/#..#/####/###.\n"
    + "..#/##./... => ####/.#.#/#.##/#.##\n"
    + "#.#/##./... => .###/...#/#.../...#\n"
    + ".##/##./... => ..##/.#.#/#.../##.#\n"
    + "###/##./... => ##../..#./..#./#...\n"
    + ".../#.#/... => .#.#/##../#..#/.#.#\n"
    + "#../#.#/... => #.##/...#/##../...#\n"
    + ".#./#.#/... => #.../..##/#..#/.##.\n"
    + "##./#.#/... => .##./..##/.#../..#.\n"
    + "#.#/#.#/... => .#../#..#/#.#./....\n"
    + "###/#.#/... => ##.#/..##/##../#...\n"
    + ".../###/... => #.../..#./##../#.##\n"
    + "#../###/... => ..#./#.../##../.##.\n"
    + ".#./###/... => ###./.#.#/..##/##.#\n"
    + "##./###/... => ##.#/#.../##.#/#.#.\n"
    + "#.#/###/... => ..##/...#/##../#..#\n"
    + "###/###/... => ##.#/.###/...#/#..#\n"
    + "..#/.../#.. => .##./#.##/..#./####\n"
    + "#.#/.../#.. => ..#./###./#.../##.#\n"
    + ".##/.../#.. => ...#/...#/.#../.###\n"
    + "###/.../#.. => .##./.#../##../#.#.\n"
    + ".##/#../#.. => ####/..##/#.../##..\n"
    + "###/#../#.. => #.../#..#/####/##..\n"
    + "..#/.#./#.. => .##./##.#/.#../###.\n"
    + "#.#/.#./#.. => ..../.###/###./.#.#\n"
    + ".##/.#./#.. => #.##/#..#/###./..#.\n"
    + "###/.#./#.. => #.../..#./##../.#.#\n"
    + ".##/##./#.. => .##./.#.#/#..#/#..#\n"
    + "###/##./#.. => .#../.#.#/#..#/....\n"
    + "#../..#/#.. => ####/..##/..##/.###\n"
    + ".#./..#/#.. => ###./.###/..#./##.#\n"
    + "##./..#/#.. => .###/####/#.../#.##\n"
    + "#.#/..#/#.. => #.##/#..#/.#.#/...#\n"
    + ".##/..#/#.. => #.../##../..##/##.#\n"
    + "###/..#/#.. => ###./##.#/#.../.#..\n"
    + "#../#.#/#.. => #.#./#.../##../..#.\n"
    + ".#./#.#/#.. => .###/#.#./...#/##.#\n"
    + "##./#.#/#.. => .#../#.##/##.#/#.#.\n"
    + "..#/#.#/#.. => .#../#..#/.#../.#.#\n"
    + "#.#/#.#/#.. => .#../.##./..../..#.\n"
    + ".##/#.#/#.. => .##./.#../####/#.##\n"
    + "###/#.#/#.. => ..#./##../##../#.#.\n"
    + "#../.##/#.. => #.##/.##./..#./..##\n"
    + ".#./.##/#.. => ###./#.#./#.../###.\n"
    + "##./.##/#.. => ####/#.../#.../#.#.\n"
    + "#.#/.##/#.. => .###/#..#/###./#..#\n"
    + ".##/.##/#.. => #.../####/###./###.\n"
    + "###/.##/#.. => .#../.#.#/##../.#..\n"
    + "#../###/#.. => ..#./.##./.###/##..\n"
    + ".#./###/#.. => ####/.##./####/....\n"
    + "##./###/#.. => #.../#.../#.##/.##.\n"
    + "..#/###/#.. => .#.#/.###/...#/....\n"
    + "#.#/###/#.. => ###./..##/.#../#.##\n"
    + ".##/###/#.. => ...#/.#../##../.#..\n"
    + "###/###/#.. => ...#/#.##/.#.#/..##\n"
    + ".#./#.#/.#. => .###/#.../..#./.##.\n"
    + "##./#.#/.#. => ###./##.#/..#./##.#\n"
    + "#.#/#.#/.#. => #.../##.#/..#./#...\n"
    + "###/#.#/.#. => ...#/...#/#..#/...#\n"
    + ".#./###/.#. => #.#./.##./#.#./.###\n"
    + "##./###/.#. => #.../####/..##/#...\n"
    + "#.#/###/.#. => ##../.##./.###/###.\n"
    + "###/###/.#. => ..#./.##./.#../#.#.\n"
    + "#.#/..#/##. => ...#/#.##/##../...#\n"
    + "###/..#/##. => ...#/#.../###./###.\n"
    + ".##/#.#/##. => ##.#/.#.#/.#../....\n"
    + "###/#.#/##. => .##./..../##.#/..#.\n"
    + "#.#/.##/##. => .#../###./#.#./##..\n"
    + "###/.##/##. => #.##/#..#/#.#./###.\n"
    + ".##/###/##. => #.##/###./..../##..\n"
    + "###/###/##. => .#../####/.###/##..\n"
    + "#.#/.../#.# => #.../#..#/..##/##.#\n"
    + "###/.../#.# => #..#/.#.#/####/#.##\n"
    + "###/#../#.# => ###./##../##.#/...#\n"
    + "#.#/.#./#.# => .##./.#.#/#.../...#\n"
    + "###/.#./#.# => .#../.#../..../#.#.\n"
    + "###/##./#.# => #.#./#.#./#.../.#..\n"
    + "#.#/#.#/#.# => ..../####/####/..#.\n"
    + "###/#.#/#.# => #..#/.##./#.../##..\n"
    + "#.#/###/#.# => ###./...#/#.##/##..\n"
    + "###/###/#.# => #.##/#.../#..#/###.\n"
    + "###/#.#/### => ..../...#/###./..#.\n"
    + "###/###/### => #..#/..../#.../#.##";

  public static Map<Grid, Grid> parseInput(String input) {
    return Stream.of(input.split("\n")).collect(Collectors.toMap(Input::getKey, Input::getValue));
  }

  private static Grid getKey(String line) {
    String key = line.split(" => ")[0];
    return createGrid(key);
  }

  private static Grid getValue(String line) {
    String key = line.split(" => ")[1];
    return createGrid(key);
  }

  private static Grid createGrid(String value) {
    String[] stringGrid = value.split("/");
    Boolean[][] grid = new Boolean[stringGrid.length][stringGrid.length];
    for (int i = 0; i < stringGrid.length; i++) {
      for (int j = 0; j < stringGrid[i].length(); j++) {
        grid[i][j] = stringGrid[i].charAt(j) == '#';
      }
    }
    return new Grid(grid);
  }

  public static Grid startGrid() {
    return createGrid(".#./..#/###");
  }
}
